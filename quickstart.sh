#!/usr/bin/env bash

echo "==================================================="
echo "MLX Distributed Quick Start"
echo "==================================================="
echo
echo "This script will help you set up MLX distributed computing."
echo

# Function to prompt for input with a default value
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    local var_name="$3"
    
    read -p "${prompt} [${default}]: " input
    if [ -z "$input" ]; then
        eval "${var_name}='${default}'"
    else
        eval "${var_name}='${input}'"
    fi
}

# Check if env_config.sh exists
if [ -f "env_config.sh" ]; then
    echo "Found existing env_config.sh"
    read -p "Do you want to reconfigure? (y/N): " reconfigure
    if [[ ! "$reconfigure" =~ ^[Yy]$ ]]; then
        echo "Using existing configuration."
        exit 0
    fi
fi

echo
echo "Let's configure your environment..."
echo

# Get user info
DEFAULT_USER="${USER}"
prompt_with_default "Username" "${DEFAULT_USER}" "MLX_USER"

# Get project path
DEFAULT_PROJECT="${HOME}/Code/ml/mlxdist"
prompt_with_default "Project directory" "${DEFAULT_PROJECT}" "MLX_PROJECT"

# Get conda path
CONDA_SEARCH_PATHS=(
    "${HOME}/miniconda3"
    "${HOME}/anaconda3"
    "${HOME}/miniforge3"
    "${HOME}/mambaforge"
    "/opt/miniconda3"
    "/opt/anaconda3"
    "/usr/local/miniconda3"
    "/opt/homebrew/Caskroom/miniconda"
)

CONDA_PATH=""
for path in "${CONDA_SEARCH_PATHS[@]}"; do
    if [ -d "$path" ]; then
        CONDA_PATH="$path"
        break
    fi
done

if [ -z "$CONDA_PATH" ]; then
    CONDA_PATH="${HOME}/miniconda3"
fi

prompt_with_default "Conda installation path" "${CONDA_PATH}" "CONDA_BASE"

# Get network interface
echo
echo "Detecting network interfaces..."
INTERFACES=$(ifconfig | grep -B2 "inet " | grep -v "127.0.0.1" | grep "^[a-z]" | cut -d: -f1 | sort -u)
echo "Found interfaces: $(echo $INTERFACES | tr '\n' ' ')"
DEFAULT_INTERFACE=$(echo "$INTERFACES" | head -n1)
prompt_with_default "Primary network interface" "${DEFAULT_INTERFACE}" "NETWORK_IF"

# Get memory limit for Apple Silicon
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo
    echo "Detected macOS (Apple Silicon memory configuration)"
    echo "Suggested memory limits:"
    echo "  - M1 Max: 60000 MB (60GB)"
    echo "  - M2 Max: 90000 MB (90GB)"
    echo "  - M2 Ultra: 120000 MB (120GB)"
    prompt_with_default "GPU memory limit (MB)" "120000" "MEM_LIMIT"
else
    MEM_LIMIT="0"
fi

# Create env_config.sh
echo
echo "Creating env_config.sh..."
cat > env_config.sh <<EOF
#!/usr/bin/env bash

# MLX Distributed Environment Configuration
# Generated by quickstart.sh on $(date)

# User Configuration
export MLX_USER="${MLX_USER}"

# Path Configuration
export MLX_PROJECT_PATH="${MLX_PROJECT}"
export CONDA_BASE_PATH="${CONDA_BASE}"

# Conda Configuration
export CONDA_ENV="mlxdist"
export CONDA_SETUP="\${CONDA_BASE_PATH}/etc/profile.d/conda.sh"

# Network Configuration
export MLX_NETWORK_INTERFACE="${NETWORK_IF}"

# Memory Configuration (for Apple Silicon)
export MLX_MEMORY_LIMIT_MB="${MEM_LIMIT}"

# Model Configuration
export MLX_MODEL="mlx-community/DeepSeek-Coder-V2-Lite-Instruct-4bit-mlx"
export MLX_DEFAULT_PROMPT="What number is larger 6.9 or 6.11?"
export MLX_MAX_TOKENS="128"

# Host Configuration File
export MLX_HOSTS_FILE="\${MLX_PROJECT_PATH}/hosts.json"

# Python Path (will be set after environment creation)
export MLX_PYTHON_PATH="\${CONDA_BASE_PATH}/envs/\${CONDA_ENV}/bin/python"

# Verify critical paths exist
check_paths() {
    local missing=0
    
    if [ ! -d "\${CONDA_BASE_PATH}" ]; then
        echo "ERROR: Conda base path not found: \${CONDA_BASE_PATH}"
        echo "       Please update CONDA_BASE_PATH in env_config.sh"
        missing=1
    fi
    
    if [ ! -f "\${CONDA_SETUP}" ]; then
        echo "ERROR: Conda setup script not found: \${CONDA_SETUP}"
        echo "       Please update CONDA_BASE_PATH in env_config.sh"
        missing=1
    fi
    
    return \$missing
}

# Function to create project directory if it doesn't exist
ensure_project_dir() {
    if [ ! -d "\${MLX_PROJECT_PATH}" ]; then
        echo "Creating project directory: \${MLX_PROJECT_PATH}"
        mkdir -p "\${MLX_PROJECT_PATH}"
    fi
}
EOF

# Make scripts executable
chmod +x env_config.sh
chmod +x setup_mlxdist.sh 2>/dev/null || true
chmod +x copy_setup_script.sh 2>/dev/null || true
chmod +x run_mlx.sh 2>/dev/null || true
chmod +x set_mem_limit.sh 2>/dev/null || true

echo
echo "==================================================="
echo "Configuration complete!"
echo "==================================================="
echo
echo "Next steps:"
echo "1. Review and edit env_config.sh if needed"
echo "2. Run: ./setup_mlxdist.sh"
echo "3. Update hosts.json with your machine hostnames"
echo "4. Copy scripts to remote machines: ./copy_setup_script.sh"
echo "5. Run setup on each remote machine"
echo "6. Start distributed jobs with: ./run_mlx.sh"
echo
echo "For detailed instructions, see the README.md"
echo "==================================================="